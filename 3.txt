#include <iostream>
using namespace std;

#define N 4 // Change N to the desired board size

int totalSolutions = 0; // Variable to store the total number of solutions

void printSolution(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << (board[i][j] ? 'Q' : '.') << " ";
        }
        cout << endl;
    }
    cout << endl;
}

bool isSafe(int board[N][N], int row, int col) {
    // Check this row on the left side
    for (int i = 0; i < col; i++)
        if (board[row][i])
            return false;

    // Check upper diagonal on the left side
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;

    // Check lower diagonal on the left side
    for (int i = row, j = col; i < N && j >= 0; i++, j--)
        if (board[i][j])
            return false;

    return true;
}

bool solveNQueensUtil(int board[N][N], int col) {
    if (col == N) {
        // All queens are placed, print the solution
        printSolution(board);
        totalSolutions++; // Increment the total number of solutions
        return true; // Uncomment this line to find only one solution
    }

    bool res = false;
    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 1;

            // Recur to place the rest of the queens
            res = solveNQueensUtil(board, col + 1) || res;

            // If placing queen in the current position doesn't lead to a solution,
            // then remove the queen from the current position (backtrack)
            board[i][col] = 0;
        }
    }

    return res;
}

void solveNQueens() {
    int board[N][N] = {0};

    if (!solveNQueensUtil(board, 0)) {
        cout << "Solution does not exist" << endl;
    } else {
        cout << "Total number of solutions: " << totalSolutions << endl;
    }
}

int main() {
    solveNQueens();
    return 0;
}
